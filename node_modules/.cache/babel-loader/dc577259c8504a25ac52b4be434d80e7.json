{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error logging in user');\n  }\n};\nexport const getUserInfo = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error getting users details');\n  }\n};\nexport const addNewPost = async (token, _ref) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref;\n\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title: title,\n          description: description,\n          price: price,\n          location: location,\n          willDeliver: willDeliver\n        }\n      })\n    });\n    const result = response.json();\n    return result;\n  } catch (ex) {\n    console.log('error making new post');\n  }\n};\nexport const deletePost = async (token, _id) => {\n  try {\n    const response = await fetch(`${baseURL}/posts/:postID`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = response.json();\n    return result;\n  } catch (ex) {\n    console.log('error deleting post');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","error","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","ex","getUserInfo","addNewPost","title","description","price","location","willDeliver","post","deletePost","_id"],"sources":["/Users/alexmenke/Fullstack/course_work/project_10/strangersThings/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async(token) => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch(error) {\n    console.log('error getting all posts')\n  }\n}\n\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    })\n    const result = await response.json();\n    return result;\n  } catch(error) {\n    console.log('error registering user')\n  }\n}\n\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`,{\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    })\n    \n    const result = await response.json();\n    \n    return result;\n    \n  } catch(ex) {\n    console.log('error logging in user')\n  }\n}\n\n\nexport const getUserInfo = async (token) => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n    })\n    \n    const result = await response.json();\n    return result;\n    \n  } catch(ex) {\n    console.log('error getting users details')\n  }\n}\n\nexport const addNewPost = async (token, {title, description, price, location, willDeliver}) => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title: title,\n          description: description,\n          price: price,\n          location: location,\n          willDeliver: willDeliver\n        }\n      })\n    })\n\n    const result = response.json();\n    return result\n\n  } catch(ex) {\n    console.log('error making new post')\n  }\n}\n\nexport const deletePost = async (token, _id) => {\n  try {\n    const response = await fetch(`${baseURL}/posts/:postID`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    })\n\n    const result = response.json();\n    return result\n  } catch(ex) {\n    console.log('error deleting post')\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}